name: Node.js CI
# 📌 Déclencheurs : ce workflow s'exécute :
# - à chaque push sur main, develop ou une branche feature/*
# - à chaque pull request vers main
on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    # 💻 Machine virtuelle sur laquelle le job s'exécute
    runs-on: ubuntu-latest

    services:
      # 📦 Services nécessaires au job (ici une base PostgreSQL Docker)
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: blogapi
          POSTGRES_PASSWORD: blogapi
          POSTGRES_DB: blogapi
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # 🔐 Variables d'environnement accessibles dans le job
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: blogapi
      DB_PASSWORD: blogapi
      DB_NAME: blogapi
      JWT_SECRET: supersecret

    steps:
      # 1️⃣ Récupérer le code source du repo
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Installer Node.js (ici version 20)
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3️⃣ Installer les dépendances déclarées dans package.json
      - name: 📦 Install dependencies
        run: npm ci

      # 4️⃣ Attendre que la base PostgreSQL soit opérationnelle
      - name: 🛠️ Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "⏳ Waiting for database..."
            sleep 2
          done

      # 5️⃣ Exécuter le script SQL pour créer les tables et rôles initiaux
      - name: 🗄️ Seed Database
        run: npm run seed-db

      # 6️⃣ Lancer les tests unitaires et fonctionnels avec Node.js
      - name: 🚀 Run tests
        run: npm run test
